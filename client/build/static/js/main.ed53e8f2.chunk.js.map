{"version":3,"sources":["components/EditorContainer.js","redux/serverdata/serverDataActions.js","redux/serverdata/serverDataTypes.js","components/LogInContainer.js","redux/login/logInActions.js","redux/login/logInTypes.js","App.js","redux/client/clientActions.js","redux/client/clientTypes.js","redux/websocket/websocketActions.js","redux/websocket/websocketTypes.js","redux/login/logInReducers.js","redux/websocket/websocketReducers.js","redux/client/clientReducers.js","redux/serverdata/serverDataReducers.js","redux/rootReducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["ShowEditorSection","state","useSelector","shallowEqual","className","Object","entries","currentUsersReducer","currentUsers","map","user","index","Fragment","key","username","id","size","scale","seed","UncontrolledTooltip","placement","target","options","placeholder","text","textReducer","toolbar","buttons","onChange","clientReducer","client","send","JSON","stringify","type","logInReducer","content","userActivityReducer","userActivity","activity","payload","ShowLoginSection","dispatch","useDispatch","inputEl","useRef","websocketReducer","websocketConnected","onSubmit","e","data","current","value","replace","preventDefault","name","title","pattern","ref","required","App","contentDefaultMessage","useEffect","clients","W3CWebSocket","onopen","console","log","websocket","onmessage","message","dataFromServer","parse","stateToChange","editorContent","values","users","length","Navbar","color","light","NavbarBrand","href","action","initialState","initState","activityState","rootReducer","combineReducers","undefined","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed53e8f2.chunk.js","sourcesContent":["import React from \"react\";\nimport { useSelector, shallowEqual } from \"react-redux\";\nimport { UncontrolledTooltip } from \"reactstrap\";\nimport Editor from \"react-medium-editor\";\nimport \"medium-editor/dist/css/medium-editor.css\";\nimport \"medium-editor/dist/css/themes/default.css\";\nimport Blockies from 'react-blockies';\n\n\n\nconst ShowEditorSection = () => {\n  const state = useSelector(state => state, shallowEqual);\n  const contentDefaultMessage = \"Start writing your document here\";\n\n  /* When content changes, we send the\ncurrent content of the editor to the server. */\n  const onEditorStateChange = text => {\n    state.clientReducer.client.send(\n      JSON.stringify({\n        type: \"contentchange\",\n        username: state.logInReducer.username,\n        content: text\n      })\n    );\n  };\n\n  return (\n    <div className=\"main-content\">\n      <div className=\"row\">\n        <div className=\"col-md-7 order-last order-md-first\">\n          <div className=\"document-holder\">\n            <div className=\"currentusers\">\n              {Object.entries(state.currentUsersReducer.currentUsers).map(\n                (user, index) => (\n                  <React.Fragment key={user[1].username + `${index}`}>\n                    <span id={`Hi${user[1].username}`} className=\"userInfo\">\n                      <Blockies\n                        className=\"account__avatar identicon\"\n                       // style={{ backgroundColor: user[1].randomcolor }}\n                        size={5}\n                        scale={8}\n                        seed={user[1].username}\n                      />\n                    </span>\n                    <UncontrolledTooltip\n                      placement=\"top\"\n                      target={`Hi${user[1].username}`}\n                    >\n                      {user[1].username}\n                    </UncontrolledTooltip>\n                  </React.Fragment>\n                )\n              )}\n            </div>\n            <Editor\n              options={{\n                placeholder: {\n                  text: state.textReducer ? contentDefaultMessage : \"\"\n                },\n                toolbar: { buttons: [\"bold\", \"italic\", \"underline\"] }\n              }}\n              className=\"body-editor h-75 unique_and_mandatory_class_name\"\n              text={state.textReducer}\n              onChange={onEditorStateChange}\n            />\n          </div>\n        </div>\n        <div className=\"col-md-5 order-first order-md-first\">\n          <div className=\"history-holder\">\n            {/*console.log(state.userActivityReducer) */}\n            <ul>\n              {Object.entries(state.userActivityReducer.userActivity).map(\n                (activity, index) => {\n                  return <li key={`activity-${index}`}>{activity[1]}</li>;\n                }\n              )}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ShowEditorSection;\n","import { UPDATE_CURRENT_USERS } from \"./serverDataTypes\";\nimport { UPDATE_USER_ACTIVITY } from \"./serverDataTypes\";\nimport { UPDATE_TEXT } from \"./serverDataTypes\";\n\nexport const currentUsers = payload => {\n  return {\n    type: UPDATE_CURRENT_USERS,\n    payload: payload\n  };\n};\n\nexport const userActivity = payload => {\n  return {\n    type: UPDATE_USER_ACTIVITY,\n    payload: payload\n  };\n};\n\nexport const text = payload => {\n  return {\n    type: UPDATE_TEXT,\n    payload: payload[0]\n  };\n};\n","export const UPDATE_CURRENT_USERS = \"UPDATE_CURRENT_USERS\";\nexport const UPDATE_USER_ACTIVITY = \"UPDATE_USER_ACTIVITY\";\nexport const UPDATE_TEXT = \"UPDATE_TEXT\";\n","import React, { useRef } from \"react\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport { setUsername } from \"../redux\";\nimport Blockies from 'react-blockies';\n\nconst ShowLoginSection = () => {\n  const state = useSelector(state => state, shallowEqual);\n  const dispatch = useDispatch();\n  const inputEl = useRef(null);\n\n  const logInUser = e => {\n    const username = inputEl.current.value.replace(/ /g, \"\");\n    const data = username;\n\n    if (!state.websocketReducer.websocketConnected) {\n      return e.preventDefault();\n    }\n    dispatch(setUsername(data));\n    state.clientReducer.client.send(\n      JSON.stringify({\n        username: data,\n        type: \"userevent\"\n      })\n    );\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"account\">\n      <div className=\"account__wrapper\">\n        <div className=\"account__card\">\n          <div className=\"account__profile\">\n            <Blockies\n              className=\"account__avatar identicon\"\n              size={10}\n              scale={10}\n              seed=\"randomness\"\n            />\n            {!state.websocketReducer.websocketConnected ? (\n              <p className=\"text-center\">\n                Connecting to server. Please wait...\n              </p>\n            ) : (\n              <>\n                <p className=\"account__name\">Hello, user!</p>\n                <p className=\"account__sub\">Join to edit the document</p>\n              </>\n            )}\n          </div>\n\n          <form onSubmit={logInUser}>\n            <input\n              name=\"username\"\n              type=\"text\"\n              title=\"No special characters and less than 16 characters\"\n              pattern=\"[\\sA-Za-z0-9\\s]{1,15}\"\n              ref={inputEl}\n              className=\"form-control\"\n              required\n            />\n            <input type=\"submit\" className=\"btn account__btn\" value=\"Join\" />\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default ShowLoginSection;\n","import { SET_USERNAME } from \"./logInTypes\";\n\nexport const setUsername = payload => {\n  return {\n    type: SET_USERNAME,\n    payload: payload\n  };\n};\n","export const SET_USERNAME = 'SET_USERNAME';","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { Navbar, NavbarBrand } from \"reactstrap\";\nimport \"./App.css\";\nimport ShowEditorSection from \"./components/EditorContainer\";\nimport ShowLoginSection from \"./components/LogInContainer\";\nimport { websocket } from \"./redux\";\nimport { client } from \"./redux\";\nimport { userActivity, currentUsers, text } from \"./redux\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const contentDefaultMessage = [\"Start writing your document here\"];\n  const state = useSelector(state => state, shallowEqual);\n\n  useEffect(() => {\n    const clients = new W3CWebSocket(\n      \"ws://ec2-52-90-200-136.compute-1.amazonaws.com:4000\"\n    );\n    clients.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n      dispatch(client({ client: clients }));\n      dispatch(websocket({ websocketConnected: true }));\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (!state.logInReducer) return;\n    state.clientReducer.client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n      const stateToChange = {};\n      if (dataFromServer.type === \"userevent\") {\n        if (dataFromServer.data.editorContent) {\n          stateToChange.currentUsers = Object.values(dataFromServer.data.users);\n          stateToChange.text = [dataFromServer.data.editorContent];\n        } else {\n          stateToChange.currentUsers = Object.values(dataFromServer.data.users);\n          stateToChange.text = state.textReducer.length\n            ? [state.textReducer]\n            : contentDefaultMessage;\n        }\n      } else if (dataFromServer.type === \"contentchange\") {\n        stateToChange.text =\n          [dataFromServer.data.editorContent] || contentDefaultMessage;\n        return dispatch(text({ ...stateToChange.text }));\n      }\n      stateToChange.userActivity = dataFromServer.data.userActivity;\n      dispatch(currentUsers({ ...stateToChange.currentUsers }));\n      dispatch(userActivity({ ...stateToChange.userActivity }));\n      dispatch(text({ ...stateToChange.text }));\n    };\n  });\n\n  return (\n    <>\n      <Navbar color=\"light\" light>\n        {state.logInReducer != null ? (\n          <NavbarBrand href=\"/\">Exit document editor</NavbarBrand>\n        ) : (\n          <NavbarBrand href=\"/\">Real-time document editor</NavbarBrand>\n        )}\n      </Navbar>\n      <div className=\"container-fluid\">\n        {state.logInReducer != null ? (\n          <ShowEditorSection />\n        ) : (\n          <ShowLoginSection />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { UPDATE_CLIENT } from \"./clientTypes\";\n\nexport const client = payload => {\n  return {\n    type: UPDATE_CLIENT,\n    payload: payload\n  };\n};\n","export const UPDATE_CLIENT = 'UPDATE_CLIENT';","import { CONNECT_WEBSOCKET } from \"./websocketTypes\";\n\nexport const websocket = payload => {\n  return {\n    type: CONNECT_WEBSOCKET,\n    payload: payload\n  };\n};\n","export const CONNECT_WEBSOCKET= 'CONNECT_WEBSOCKET';","import { SET_USERNAME } from \"./logInTypes\";\n\nconst initialState = null;\n\nconst logInReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USERNAME:\n      return {\n        ...state,\n        username: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default logInReducer;\n","import { CONNECT_WEBSOCKET } from \"../websocket/websocketTypes\";\n\nconst initialState = { websocketConnected: false };\n\nconst websocketReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONNECT_WEBSOCKET:\n      return {\n        ...state,\n        websocketConnected: action.payload.websocketConnected\n      };\n    default:\n      return state;\n  }\n};\n\nexport default websocketReducer;\n","import { UPDATE_CLIENT } from \"../client/clientTypes\";\n\nconst initialState = { client: \"\" };\n\nconst clientReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_CLIENT:\n      return {\n        ...state,\n        client: action.payload.client\n      };\n    default:\n      return state;\n  }\n};\n\nexport default clientReducer;\n","import { UPDATE_CURRENT_USERS } from \"../serverdata/serverDataTypes\";\nimport { UPDATE_USER_ACTIVITY } from \"../serverdata/serverDataTypes\";\nimport { UPDATE_TEXT } from \"../serverdata/serverDataTypes\";\n\nconst initialState = {\n  text: \"\"\n};\nconst initState = {\n  currentUsers: {}\n};\nconst activityState = {\n  userActivity: {}\n};\n\nexport const currentUsersReducer = (state = initState, action) => {\n  if (action.payload === undefined) return state;\n\n  switch (action.type) {\n    case UPDATE_CURRENT_USERS:\n      return {\n        ...state,\n        currentUsers: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport const userActivityReducer = (state = activityState, action) => {\n  if (action.payload === undefined) return state;\n  switch (action.type) {\n    case UPDATE_USER_ACTIVITY:\n      return {\n        ...state,\n        userActivity: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport const textReducer = (state = initialState.text, action) => {\n  if (action.payload === undefined) return state;\n  switch (action.type) {\n    case UPDATE_TEXT:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport logInReducer from \"./login/logInReducers\";\nimport websocketReducer from \"./websocket/websocketReducers\";\nimport clientReducer from \"./client/clientReducers\";\nimport {\n  userActivityReducer,\n  currentUsersReducer,\n  textReducer\n} from \"./serverdata/serverDataReducers\";\n\nconst rootReducer = combineReducers({\n  logInReducer,\n  clientReducer,\n  websocketReducer,\n  userActivityReducer,\n  currentUsersReducer,\n  textReducer\n});\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport rootReducer from \"./rootReducer\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>, \n                \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}